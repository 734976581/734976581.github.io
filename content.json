[{"title":"浏览器兼容问题","date":"2017-03-15T08:49:25.000Z","path":"2017/03/15/浏览器兼容问题/","text":"所谓的浏览器兼容性问题，是指因为不同的浏览器对同一段代码有不同的解析，造成页面显示效果不统一的情况。在大多数情况下，我们的需求是，无论用户用什么浏览器来查看我们的网站或者登陆我们的系统，都应该是统一的显示效果。所以浏览器的兼容性问题是前端开发人员经常会碰到和必须要解决的问题。在学习浏览器兼容性之前，我想把前端开发人员划分为两类：第一类是精确按照设计图开发的前端开发人员，可以说是精确到1px的，他们很容易就会发现设计图的不足，并且在很少的情况下会碰到浏览器的兼容性问题，而这些问题往往都是浏览器的bug，并且他们制作的页面后期易维护，代码重用问题少，可以说是比较牢固放心的代码。第二类是基本按照设计图来开发的前端开发人员，很多细枝末节差距很大，不如间距，行高，图片位置等等经常会差几px。某种效果的实现也是反复调试得到，具体为什么出现这种效果还模模糊糊，整体布局十分脆弱。稍有改动就乱七八糟。代码为什么这么写还不知所以然。这类开发人员往往经常为兼容性问题所困。修改好了这个浏览器又乱了另一个浏览器。改来改去也毫无头绪。其实他们碰到的兼容性问题大部分不应该归咎于浏览器，而是他们的技术本身了。这篇文章主要针对的是第一类，严谨型的开发人员，因此这里主要从浏览器解析差异的角度来分析兼容性问题浏览器兼容问题一：不同浏览器的标签默认的外补丁和内补丁不同问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。碰到频率:100%解决方案：css里 {margin:0;padding:0;}备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的css文件开头都会用通配符来设置各个标签的内外补丁是0。浏览器兼容问题二：块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大问题症状:常见症状是ie6中后面的一块被顶到下一行碰到频率：90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）解决方案：在float的标签样式控制中加入 display:inline;将其转化为行内属性备注：我们最常用的就是div+css布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用margin实现，这就是一个必然会碰到的兼容性问题。浏览器兼容问题三：设置较小高度标签（一般小于10px），在ie6，ie7，遨游中高度超出自己设置高度问题症状：ie6、7和遨游里这个标签的高度不受控制，超出自己设置的高度碰到频率：60%解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是ie8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。浏览器兼容问题四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，ie6间距bug（类似第二种）问题症状：ie6里的间距比超过设置的间距碰到几率：20%解决方案：在display:block;后面加入display:inline;display:table;备注：行内属性标签，为了设置宽高，我们需要设置display:block;(除了input标签比较特殊)。在用float布局并有横向的margin后，在ie6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:talbe。浏览器兼容问题五：图片默认有间距问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。碰到几率：20%解决方案：使用float属性为img布局备注：因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。浏览器兼容问题六：标签最低高度设置min-height不兼容问题症状：因为min-height本身就是一个不兼容的css属性，所以设置min-height时不能很好的被各个浏览器兼容碰到几率：5%解决方案：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}备注：在B/S系统前端开时，有很多情况下我们又这种需求。当内容小于一个值（如300px）时。容器的高度为300px；当内容高度大于这个值时，容器高度被撑高，而不是出现滚动条。这时候我们就会面临这个兼容性问题。浏览器兼容问题七：透明度的兼容css设置方法是：每写一小段代码（布局中的一行或者一块）我们都要在不同的浏览器中看是否兼容，当然熟练到一定的程度就没这么麻烦了。建议经常会碰到兼容性问题的新手使用。很多兼容性问题都是因为浏览器对标签的默认属性解析不同造成的，只要我们稍加设置都能轻松地解决这些兼容问题。如果我们熟悉标签的默认属性的话，就能很好的理解为什么会出现兼容问题以及怎么去解决这些兼容问题。/ css hack/我很少使用hacker的，可能是个人习惯吧，我不喜欢写的代码ie不兼容，然后用hack来解决。不过hacker还是非常好用的。使用hacker 我可以吧浏览器分为3类：ie6 ；ie7和遨游；其他（ie8 chrome ff safari opera等）ie6认识的hacker 是下划线_ 和星号ie7 遨游认识的hacker是星号 （包括上面问题6中的 !important也算是hack的一种。不过实用性较小。）比如这样一个css设置 height:300px;height:200px;_height:100px;ie6浏览器在读到 height:300px的时候会认为高时300px；继续往下读，他也认识heihgt， 所以当ie6读到height:200px的时候会覆盖掉前一条的相冲突设置，认为高度是200px。继续往下读，ie6还认识_height,所以他又会覆盖掉200px高的设置，把高度设置为100px；ie7和遨游也是一样的从高度300px的设置往下读。当它们读到height200px的时候就停下了，因为它们不认识_height。所以它们会把高度解析为200px；剩下的浏览器只认识第一个height:300px;所以他们会把高度解析为300px。因为优先级相同且想冲突的属性设置后一个会覆盖掉前一个，所以书写的次序是很重要的。最后说一下，严谨型的开发人员会有一套合适自己的RESET.CSS。结合自己的经验尽量规避容易出现不兼容的问题。以减少hack的使用，尽量符合W3C的标准。作者： 老猿链接：http://www.imooc.com/article/9629来源：慕课网","tags":[]},{"title":"nodejs介绍","date":"2017-03-15T08:42:47.000Z","path":"2017/03/15/nodejs/","text":"1.Nodejs的介绍Node.js的是建立在Chrome的JavaScript的运行时，可方便地构建快速，可扩展的网络应用程序的平台。Node.js使用事件驱动，非阻塞I/O模型，轻量、高效，可以完美地处理时时数据，运行在不同的设备上。 1.1 谁在用Nodejs? 从Nodejs官方网站的企业登记页(https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node)，包括我们熟知的公司有LinkedIn, Yahoo, Paypal, eBay, Walmart，Groupon 还有很多的中小型公司，国内的公司如雪球、淘宝、网易、百度等也都有很多项目运行在Node.js之上。这些公司不仅是尝试在用，而且都在向Nodejs迁移。截止到2014年6月本文发稿时，已经有79693包在npm.org上面发布，而且这个数字还在快速增长中。 那么接下来，大家肯定都会问为什么要是用Nodejs呢？ 1.2 为什么要用Nodejs? 从我使用体会来说，Node有4大优势： Nodejs基于Javascript语言，不用再单独新学一门陌生的语言，从而减低了学习的门槛。同时，Javascript语言在Web前端开发中至关重要，特别HTML5的应用必须要使用，所以前后台统一语言，不仅可以实现程序员的全栈开发，还可以统一公共类库，代码标准化。单凭这一点，Nodejs就已经赢得市场的青睐了。 Nodejs并没有重新开发运行时环境，而是选择了目前最快的浏览器内核V8做为执行引擎，保证了Nodejs的性能和稳定性。 Nodejs的开发非常高效，而且代码简单，得益于Nodejs的单线程机制。而Nodejs的另一个特点异步编程，让Nodejs处理IO密集型应用有了明显的优势。个人感觉，用Nodejs比Java做Web开发要高效10倍，比PHP的代码还要简单。 Nodejs的社区在壮大，不仅包的数量在快速增加，而且包的质量也要明显好于其他语言的。很多明星级的包，都是简单而灵巧的，为了开发者的使用习惯而设计。我最常用到的工具包，如socket.io, moment.js, underscore.js, async.js, express.js, bower.js, grunt.js, forever.js…，确实在改变我以前的编程习惯。当然，除了我使用Nodejs的理由，很多公司也都有自己的使用理由。 ebay选择Nodejs的理由，可以归纳为以下4点： 动态语言：开发效率非常高，并有能力构建复杂系统，如ql.io。性能和I/O负载：Nodejs非常好的解决了IO密集的问题，通过异步IO来实现。连接的内存开销：每个Node.js进程可以支持超过12万活跃的连接，每个连接消耗大约2K的内存。操作性：实现了Nodejs对于内存堆栈的监控系统。 1.3 Nodejs不适合的领域 每一种语言或平台都有不擅长领域，对于Nodejs来说最不擅长的领域在于CPU和内存的编程操作。 计算密集型应用，让Javascript和C去拼计算性能，估计是不可能赢的。 内存控制，让Javascript和Java比较复杂数据类型定义，也是很困难的。因为Javascript的面向对象是基于JSON的，而Java是直接使用内存结构。所以，通过JSON序列化和反序列的过程控制内存，Javascript就已经输了。 大内存的应用，由于V8引擎有内存设计的限制，32位环境中最大堆是1G，64位环境中最大堆也不到2G，如果要一次读入10G数据，对于Nodejs来说也无法实现。 静态服务器，虽然Nodejs的优势在IO密集集应用，但是和Nginx的处理静态资源还是有很大的差距。 不需要异步的应用：比如系统管理，自行化脚本等，还是Python更顺手，Nodejs的异步调用可能会给编程带来一些麻烦。 2.nojs学习路线图 我们知道Nodejs已经被广发地应用在各种的场景了，针对Nodejs的应用场景，我们应该如何学习Nodejs呢？ 以下内容是我整理的文档和教程，每个软件包对应一篇文章，大家可以根据自己的需要进行阅读，完整的文章列表，可以查看：从零开始nodejs系列文章。 项目管理：npm,grunt, bower, yeomanWeb开发：express,ejs,hexo, socket.io, restify, cleaver, stylus, browserify,cheerio工具包：underscore,moment,connet,later,log4js,passport,passport(oAuth),domain,require,reap,commander,retry数据库：mysql,mongoose,redis异步：async,wind部署：forever,pm2测试：jasmine,karma跨平台：rio,tty内核：cluster,http,request算法：ape-algorithm(快速排序),ape-algorithm(桶排序)Nodejs在快速的发展着，软件包版本升级的很快，文章有运行不通的地方请参考官方文档解决。我也会不定期更新文章，尽量保持文章代码的可用性。 转载请注明出处：http://blog.fens.me/nodejs-roadmap/","tags":[]},{"title":"程序员你真的会写简历吗？","date":"2017-03-15T05:42:11.000Z","path":"2017/03/15/程序员你真的会写简历吗？/","text":"又是一年跳槽季，金三银四毫不夸张。 简历是我们找工作的行头，重要性不言而喻。可你真的会写简历吗？面试其实就是面试官和你的一次约会。他是女你是男，能不能在一起取决于你能否讨他的欢心。一份整洁的简历，重要性不亚于你约会时的行头和装束。感谢这个时代简历不再需要手写，不然很多人的“字”都过不了关，比如说我，现在几乎是不会写字的。简历是一个行业性和时代性很强的东西，不同的时代和行业简历的最优形态都不同，但一份好的简历总会有一些共同的特质。当然，简历只是“形”，真正重要的还是你个人的综合素质、业务能力以及技术水平。如果个人不具备很强的竞争力，那么简历就成了各大直播平台网红主播的封面照，只能在列表里看看，是万万不能点进去的。我不能说什么样的简历好，什么样的简历不好，每个简历审阅者都有自己的偏好。但我尝试从这些年看技术简历的经验中提取出一些我所关注的点，尝试和大家聊聊一份简历应该有的结构、细节、风格，以及一定不要有的内容。简历这东西，说白了，就是你认真，他/她也认真。整体风格首先，简历的第一要素是它必须要，简洁而不简单。这是整体风格。我们来看看整体风格上要注意哪些。我看过很多同学的简历只有一页，字大行稀，这不好，3秒看完，还不知道你到底会干撒，这样的简历HR筛选简历这一关都过不了，根本到不了技术面试官手里；也看过很多简历，一页里密密麻麻的宋体4号字，这也不好，看的太累（但绝对比字大行稀要好）。通常来说选用宋体5号字，正文行间距在1.2左右。正文不要有任何的加粗，只加粗标题（目的是为了让结构清晰）。各种在正文里加粗的作法会让面试者觉得太做作，自信的人是不需要特意强调某个关键字的，你的整体风格看起来清爽简介，简历筛选者自然会认真对待，并自己去寻找她需要的信息，根本无需加粗。简历的页数很多文章推荐1到2页不超过3页，这说了和没说一样。我推荐的简历页数是2页，1页太少，3页太多，2页最佳。不要做彩色的简历（设计师除外）。只有黑白两色即可。对于研发岗位，不要附加照片，不要附加照片，不要附加照片，长的美不美、帅不帅都没有太多的好处。你根本不知道看简历的会不会嫉妒你的美貌。简历的格式最好是PDF、PDF、PDF，重要的事情说3遍。很多人喜欢发Word，不是不行，但绝对没有一份PDF的看的舒服。一是PDF是只读模式，二是PDF打开更快速。Word这种东西，打开全屏的错别字检查，这体验简直是不能忍。简历的文件命名请采用以下格式 姓名-电话-职位.pdf。不要在简历中写自己的微信号、QQ号。联系方式只留下一个邮箱和手机号即可。邮箱最好是163，outlook或者gmail，随意。qq邮箱这个怎么说吧，我个人认为是无所谓的，但遇到有些面试官就不好说了。内容一份简历的结构非常的重要，基本上如果我至上到下扫一遍觉得结构非常混乱，不能让我对你有一个初步的了解，是不会继续往下看的，直接打回到HR那里。大家要知道每个人的时间都很宝贵，看简历的人没有义务为你的不认真买单。好的简历结构遵循以下的层次结构（并不是唯一结构，只是我推荐的一种）：标题。标题只需要写XX的个人简历即可。个人简介。个人简介包括姓名、毕业学校（大学以上）、年龄、出生年份（别写月日，看简历的不会想在你生日的时候给你一份惊喜）、学历、目前职位、籍贯、联系方式。要注意，这些内容通常都非常简单，不要每个属性单独一行，一行排3个属性最好。工作经历。这是我很多同学完全忽略的地方，完全没有分清楚工作经历和项目经历。工作经历必须单独成为一块儿，每段经历不需要些太多，只需要以年份+公司名称+职位即可。比如2001~2003 xxx公司，PHP程序员2003~2005 xxx公司，架构师2005~2012 xxx公司，技术总监2012~2016 xxx公司，CTO就是这么简单即可，具体的工作内容是在项目经验里描述的。我推荐的就是这些内容，如果你还要加上薪资多少、公司规模等附加内容，我并不推荐，因为这些内容都是可以虚构的，写上去没有任何好处，反而会给简历阅读者一种无法掌控的心里暗示，他根本无法去核对这些信息。所以简历一定要尽可能的写一些容易实在的内容。注意，时间一定要按照顺序排列，不要倒叙排列。这里是为了让简历阅读者看到你的履历，没有必要倒叙排列。时间最好能够接上，如果时间有中断，比如中间自己出去瞎折腾创业去了，想好怎么回答面试者的提问。80%的概念，提问者会问你中间这段时间干嘛去了。4 . 相关技能。 不要简单的罗列技术名词（这点太太太重要了），有些同学面试PHP岗位，技术名词从服务器到前端、从数据库到缓存、从PHP到Java，几乎我知道的技术名字他都写上去了。我一看工作年限，才不到3年。这样的简历，直接是被Pass的，对于一个正常智商水平的人来说，3年是不可能精通或者了解这么多技术和语言的。换句话说，如果你天赋异禀，我觉得你是不会投简历到我们这家小公司的，你早就是BAT、MS、Google的抢手货了。推荐技术以Tech Stack技术栈的形式出现，形成一个系统，而不要东一个西一个，前端就是前端、服务器就是服务器，清清楚楚明明白白，即使你认为你是一个FullStack开发者，也请偏重一端，而不是两端齐头并进。你认为的Full Stack在很多有资历的技术开发者面前也许只是玩具，自娱自乐可以，但并不能应用到真实的生产环境中（真实环境有非常多的细节，一个非专业的开发者很难兼顾到所有细节）。所以，如果你要以 Full Stack的姿态出现在面试官面前，请三思。毕竟像模像样的公司，前端和服务器是区分非常严格的，专人专事儿才能做好一个产品。所以，请慎重填写技术名词，最好每个技术名词附加一个更加详细的使用点。比如你说你懂Redis，那么请这样写：熟悉Redis的常规操作，对Redis五种数据类型、pub\\sub模式有较深入的理解，并将Redis应用在系统的缓存层以及秒杀系统中（如果你这样写，多半面试官会问你关于秒杀的细节，你就可以提前准备这方面的知识了）；这样写远比你把同类缓存系统全部罗列一边要好很多很多。还要提醒大家，同类技术最好只写一个，很少有人能精通两个以上。比如对于Vue、Ng、React，我推荐事实求是。只选1个来写，精通AngularJS（然后按照上诉举例的Redis，写出其特性，比如AngularJS的指令、双向数据绑定等）。其实只写精通AngularJS即可，没有必要再补充一句“熟悉Vue”。简历阅读者要的是精通而非“泛”。而且，相信我，一个资深的技术总监，都相信一个真理，你精通一个框架再熟悉其他的框架并不是一个难事儿。你完全不需要担心我只会Vue，但公司要的是NG怎么办？这是没办法的办法，那么多框架，你能学得完？比如TP和Laravel，你精通一个另外一个真的不是什么太大的问题，但前提条件是，你！要！精！通！精通有点儿夸张，这个词在简历里已经被用烂了。事实上，严格意义上来讲，我们都只是能够很熟练的使用某个框架，要说到精通，个人认为等你把框架源代码看完了再来谈“精通”。所以，我认为是不是用精通这个词来描述技术，这取决于“精通”在你简历里出现的频度。如果你总共6项技能，4到5项都是精通、精通、精通、精通、精通，这很容易让你在面试的过程中相当的尴尬。合理分配精通、熟悉、了解这3个等级词汇的出现频度是非常重要的。另外一个建议是，对于你不熟悉的只是知道是干什么的技术，千万不要写。很多面试者很喜欢找你只是简单提了一下的技术来发问，当然他并没有指望你能回答的多么准确，可如果哥们你一脸懵逼，完全不知道他说的是什么，应付几句的话都说不出来，那真的是得不偿失。如果你万一被问的懵逼了，请直接了当的说抱歉，这个我了解的并不深入，切忌东拉西扯，欲盖弥彰。对于前端同学来说，不要过多的描述CSS和HTML相关的能力。在很多公司眼里CSS和HTML是属于非常基础的能力，重要的是什么，重要的是JavaScript。如果你用JavaScript写过或者开发过任何框架性的东西，这是相当加分的。很多同学对于前端的理解还停留在“前端就是做页面”这个阶段，但事实上前端已经和服务器没有差别，大量复杂的业务需要前端来处理。这也是为什么这些年前端框架这么流行的原因，早期的网页哪儿有框架这个说法，一个Jquery走天下，更早的时候还有extjs这些，注意jquery只是一个库或者说工具，并不是框架。总结来说，CSS和HTML提一下即可，可以描述自己能够熟练使用LESS或者SASS。还有一个坑，如果你不是专业的DBA，切忌不要写精通MySQL，你根本不知道MySQL或者其他数据库精通是一个什么概念，随便问你几个数据库的锁机制你都答不上来，更何况很多同学连事务都没有使用过，只是简单的查询数据并不能说“精通MySQL”。当然，如果你应聘的是Web开发者，面试官也根本不会对你的MySQL要求有多高，会使用事务、能够很好的建立索引，避免过多的使用join查询，不会愚蠢的循环查询数据库即可。很多前端开发者喜欢附上自己个人作品，这个个人作品通常就是自己搭建的一个个人主页或者是博客，动效非常华丽，页面UI上佳，但相信我，HR筛选者看的都已经审美疲劳了。如果你的个人博客里没有什么有深度的技术文章，我并不建议附带这种纯粹的页面网页。原因还是在于我说的，你既然附上了作品，那么你肯定认为这是你最好的或者是最满意的。但你最好的最满意的作品，只是一个简单的效果网页，这会给面试官一种你根本不理解现在的前端是要做什么的感觉，他会潜意识的认为，你还停留在前端就是做网页这个阶段。得不偿失。当然，如果你有些博客的习惯，并且认真的对待每一篇的文章，那么无聊文章水平高低，都建议附加上。还有，不要附带自己的微信公众号在简历里，你是求职研发的，不是来做媒体的，这和技术不搭边。 项目经历、经验切忌多而杂，很多同学，4,5页简历十几个项目，不管大项目、小项目统统都罗列出来，这非常的不好。你需要挑选有代表性的项目，每个公司1到2个项目为佳。项目经验、描述把握一个原则，求质不求量。深度描述你在每个项目里的职责。推荐大家重点描述项目遇到了什么问题，你是如何解决的，或者是从业务、设计上巧妙规避或者是用什么技术来解决这个问题的。比如使用任务队列异步解耦订单的处理；使用Redis的pub\\sub来做定时器，避免长连接轮询；前端使用事件注册机制传递参数避免类与类之间的耦合等。一个项目里技术点太多了，选择你认为最重要或者你最得意的技术点来描述项目是非常好的做法。不要在项目里机械的写出自己的职位，很多同学罗列十几个项目，每个项目都机械的写上项目经理、产品经理、程序员、小组长、负责人。没有必要。现在的公司都喜欢说自己是扁平化管理, 不建议强调自己在每个项目中的职位。你只需要写出你在项目中做了什么事情，解决了什么问题，深度描述你所使用的技术即可。其他的奇淫技巧根本不需要。简历包括以上内容即可，如果你还有其他的比较有名气的开源项目可以附加上。我并不推荐杂七杂八的写一些个人的小作品，如果你在github上有一些高Star的开源项目，可以写上去，绝对是加分项。最后，还是要提醒各位马上要换工作的同学，你的技术水平如何，一个稍微有资历的技术面试官问几个问题马上就能知道你的技术水平如何。所以，努力提升自己才是最重要的，如果你的技术功底深厚，不需要太多技巧简历也不会太差，但本文所提出的注意点并不属于技巧，而是一份优秀简历的基本要素 作者： 七月在夏天链接：http://www.imooc.com/article/16649来源：慕课网","tags":[]}]